<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-01-08T18:20:02+09:00</updated><id>/feed.xml</id><title type="html">u6k.Blog</title><subtitle>プログラミングやWebサービスと戯れたログを残しています。</subtitle><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><entry><title type="html">2018年の振り返り</title><link href="/2019/01/08/2018-retrospective.html" rel="alternate" type="text/html" title="2018年の振り返り" /><published>2019-01-08T00:00:00+09:00</published><updated>2019-01-08T00:00:00+09:00</updated><id>/2019/01/08/2018-retrospective</id><content type="html" xml:base="/2019/01/08/2018-retrospective.html">&lt;p&gt;あけましておめでとうございます。本年もよろしくお願いいたします。&lt;/p&gt;

&lt;p&gt;2018年が終わりましたので振り返りと、振り返り結果を踏まえた2019年の目標設定をします。&lt;/p&gt;

&lt;h2 id=&quot;2018年当初のミッションステートメント&quot;&gt;2018年当初のミッション・ステートメント&lt;/h2&gt;

&lt;p&gt;まずは、2018年当初のミッション・ステートメント(自分憲法)を再掲します。どのような自分になりたかったのかを思い出しましょう。ただ、ミッション・ステートメントを最初に作成したのは2018年11月なので、正しくは「2018年当初」ではありません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;人生
    &lt;ul&gt;
      &lt;li&gt;(保留)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;仕事
    &lt;ul&gt;
      &lt;li&gt;余力を残しながら(業務中に勉強などをしながら)リーダー業務をこなす&lt;/li&gt;
      &lt;li&gt;ナレッジ的な成果を出して、自分の特性を周知する&lt;/li&gt;
      &lt;li&gt;いつでも手を引けるようにする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;社会
    &lt;ul&gt;
      &lt;li&gt;(保留)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;成長(個人システム運用)
    &lt;ul&gt;
      &lt;li&gt;要求・設計・実装を矛盾なく整理する&lt;/li&gt;
      &lt;li&gt;ポートフォリオを整理して、自分の特性を周知する&lt;/li&gt;
      &lt;li&gt;投資システムを運用して、財務に反映する&lt;/li&gt;
      &lt;li&gt;吸収した知識をナレッジに変換して、ブログなどで周知する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;経済
    &lt;ul&gt;
      &lt;li&gt;暴飲・暴食のような無駄な出費を抑制する&lt;/li&gt;
      &lt;li&gt;仕事以外の収入を確保する&lt;/li&gt;
      &lt;li&gt;将来的に、親たちの世話をできる程度の財力を確保する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;健康
    &lt;ul&gt;
      &lt;li&gt;最低限、適度なエクササイズを行い、肥満や生活習慣病を避ける&lt;/li&gt;
      &lt;li&gt;可能であれば、スポーツを行い、身体を鍛える&lt;/li&gt;
      &lt;li&gt;十分な睡眠時間を確保して、睡眠負債を抱えない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;家庭
    &lt;ul&gt;
      &lt;li&gt;家族が、物事を論理的に整理する能力を高める&lt;/li&gt;
      &lt;li&gt;自宅が片付いており、過ごしやすい状態を維持する&lt;/li&gt;
      &lt;li&gt;家事作業が整理されており、なぜ・誰が・どうするのかがわかる状態を維持する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2018年当初のkpt&quot;&gt;2018年当初のKPT&lt;/h2&gt;

&lt;p&gt;ミッション・ステートメントを踏まえて、&lt;a href=&quot;/2018/01/03/2017-retrospective.html#%E4%BB%8A%E5%B9%B4%E3%81%AEkpt&quot;&gt;2018年当初のKPT&lt;/a&gt;を再掲します。何を問題と感じて、どのように改善したかったのかを思い出しましょう。&lt;/p&gt;

&lt;p&gt;本来はミッション・ステートメントからKPTを設定すべきですが、この時のKPTはなんとなくで設定していました。ミッション・ステートメントの作成が2018年11月だったので。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keep (うまくいって、次も続けたいこと)
    &lt;ul&gt;
      &lt;li&gt;ブログにアウトプットする&lt;/li&gt;
      &lt;li&gt;プロダクトをリリースする&lt;/li&gt;
      &lt;li&gt;活動頻度を維持する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Problem (問題だと認識していること)
    &lt;ul&gt;
      &lt;li&gt;ブログへのアウトプットが少ない&lt;/li&gt;
      &lt;li&gt;作業環境が限定されてしまった&lt;/li&gt;
      &lt;li&gt;プロジェクトをモデリングできていない&lt;/li&gt;
      &lt;li&gt;サイド・プロジェクトをモデリングできていない&lt;/li&gt;
      &lt;li&gt;要件～設計～実装をモデリングできていない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Try (改善策、工夫してみたいこと)
    &lt;ul&gt;
      &lt;li&gt;各種モデリングを実践する&lt;/li&gt;
      &lt;li&gt;ブログの作業環境をもっと整備する&lt;/li&gt;
      &lt;li&gt;サイド・プロジェクトの作業環境をもっと整備する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2018年の活動集計&quot;&gt;2018年の活動集計&lt;/h2&gt;

&lt;p&gt;なりたい自分とどうしたいのかを思い出しました。では、2018年の活動がどうだったかを集計します。&lt;/p&gt;

&lt;h3 id=&quot;個人プロダクトのリリース&quot;&gt;個人プロダクトのリリース&lt;/h3&gt;

&lt;p&gt;個人プロダクトはGitHubで管理しているので、GitHubのReleaseを集計します。まずは月ごとに集計してみます。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;期間&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;リリース数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-02&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-03&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-04&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-05&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-06&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-07&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-08&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-09&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-10&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;総計&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;79&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;6月が一瞬落ち込みますが、4月から8月にかけて多くリリースしています。この時は仕事が政治的なゴタゴタでうまく進まなかったので、余った時間とストレスをぶつけてた感じなのかな？&lt;/p&gt;

&lt;p&gt;次に、リポジトリごとのリリース数を集計してみます。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;リポジトリ&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;リリース数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/ceron-analyze&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/crawline&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/extract-content&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/google-news-analyze&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/investment-machine&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/my-services&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/nginx-proxy&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/rails-tutorial-hello-app&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/rails-tutorial-sample-app&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/rails-tutorial-toy-app&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/redmine&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/ruby-editor&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/rundeck&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/sample-parse-xbrl&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/sample-parse-xbrl-2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/sample-sidekiq&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;u6k/scoring-horse-racing&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;総計&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;79&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;investment-machine&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;scoring-horse-racing&lt;/code&gt;のリリース数が目立ちます。これらは、株価と競馬のデータをスクレイピングするプロダクトです。データ収集が楽しくて、細かくリリースを行っていたんですね。&lt;code class=&quot;highlighter-rouge&quot;&gt;my-services&lt;/code&gt;のリリース数が多いのは、&lt;code class=&quot;highlighter-rouge&quot;&gt;investment-machine&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;scoring-horse-racing&lt;/code&gt;などのリリースに伴って本番環境の&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;などデプロイ設定の変更を行ったためです。&lt;/p&gt;

&lt;p&gt;また、リリース数は少ないものの、Railsに関するリポジトリを多く作りました。作業環境の変化に伴い、使用言語をJavaからRubyにしたためです。&lt;/p&gt;

&lt;h3 id=&quot;githubアクティビティ&quot;&gt;GitHubアクティビティ&lt;/h3&gt;

&lt;p&gt;GitHub Contributionsを見てみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2019-01-08-2018-retrospective/github.png&quot; alt=&quot;github contributions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;リリースが多かった4月から8月は芝生が青々としていますが、それ以外、特に9月以降は空白が目立ちます。よくないですね。&lt;/p&gt;

&lt;p&gt;傾向を知るために、&lt;a href=&quot;https://portfolio.forkwell.com/@u6k?open_auto_profile=true&quot;&gt;Forkwellで分析&lt;/a&gt;してみます。次のように出ました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;超絶技巧のRuby忍者で2018年から累計39044行（上位10.6%）変更しました。&lt;/p&gt;

  &lt;p&gt;他には、Javaを2012年から使いはじめ、累計32857行（上位6.9%）
C#を2016年から使いはじめ、累計10732行（上位76.2%）変更しました。&lt;/p&gt;

  &lt;p&gt;直近半年では主にRubyを書いています。
土日は他の人より明らかに多くのコードを書きます。
深夜は他の人より明らかに多くのコードを書きます。&lt;/p&gt;

  &lt;p&gt;半年間でアクティブに開発しているリポジトリはu6k/scoring-horse-racing(307 commits)です。
他にもu6k/crawline(45 commits)、u6k/ceron-analyze(36 commits)を開発しています。&lt;/p&gt;

  &lt;p&gt;数いるVimmerの中でもデフォルトを愛すVim侍で、設定ファイルの変更量は212行です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Findyでも分析してみます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;私は2018年にGitHubで1475コントリビュートし、Findy内で979位でした。月間の最大は262 (4月)、一日あたりの平均は4.2/日でした。あなたも2018年のコントリビューション活動をチェックしよう！ https://findy-code.io?h=67_44dvkaW6dW&amp;amp;t=yc #findy #コントリビューションオブザイヤー&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ブログの投稿&quot;&gt;ブログの投稿&lt;/h3&gt;

&lt;p&gt;ブログの投稿数を月ごとに集計します。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;期間&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;投稿数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-02&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-04&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-05&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-06&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;総計&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;17&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;合計で17本。2017年は28本だったので、大きく減ってしまっています。その分、個人プロダクトに注力したとも言えますが、うーん。ネタはいろいろあるのですけど、どうにも執筆の敷居がまだ高くて…&lt;/p&gt;

&lt;h3 id=&quot;タスク処理&quot;&gt;タスク処理&lt;/h3&gt;

&lt;p&gt;タスクはRedmineで管理しているので、Redmineの活動を集計します。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;期間(月)&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;タスク処理数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01&lt;/td&gt;
      &lt;td&gt;156&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-02&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-03&lt;/td&gt;
      &lt;td&gt;233&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-04&lt;/td&gt;
      &lt;td&gt;408&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-05&lt;/td&gt;
      &lt;td&gt;486&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-06&lt;/td&gt;
      &lt;td&gt;266&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-07&lt;/td&gt;
      &lt;td&gt;212&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-08&lt;/td&gt;
      &lt;td&gt;147&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-09&lt;/td&gt;
      &lt;td&gt;116&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-10&lt;/td&gt;
      &lt;td&gt;663&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-11&lt;/td&gt;
      &lt;td&gt;704&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12&lt;/td&gt;
      &lt;td&gt;740&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;タスクには、ソースコード執筆、それ以外の個人的な作業、家事、仕事などいわゆる「作業」の全てを含むほか、ブックマークやナレッジなどのWikiの更新も含みます。なので、数が多いです。また、10月あたりからブックマークをRedmine Wikiに作成するようになったので、処理数が増えています。しかし、Wikiにブックマークするの、面倒なんですよねぇ…&lt;/p&gt;

&lt;p&gt;うーん、これといって有意な情報は読み取れないですね。よく更新したな、よく更新したわりには意義のある成果を出せていないなぁ、という感想くらい。参考までに、他の年と比べると次のようになります。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;2014年&lt;/th&gt;
      &lt;th&gt;2015年&lt;/th&gt;
      &lt;th&gt;2016年&lt;/th&gt;
      &lt;th&gt;2017年&lt;/th&gt;
      &lt;th&gt;2018年&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;635&lt;/td&gt;
      &lt;td&gt;551&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;156&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;464&lt;/td&gt;
      &lt;td&gt;671&lt;/td&gt;
      &lt;td&gt;124&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3月&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;530&lt;/td&gt;
      &lt;td&gt;213&lt;/td&gt;
      &lt;td&gt;105&lt;/td&gt;
      &lt;td&gt;233&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4月&lt;/td&gt;
      &lt;td&gt;1114&lt;/td&gt;
      &lt;td&gt;380&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;210&lt;/td&gt;
      &lt;td&gt;408&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5月&lt;/td&gt;
      &lt;td&gt;306&lt;/td&gt;
      &lt;td&gt;516&lt;/td&gt;
      &lt;td&gt;215&lt;/td&gt;
      &lt;td&gt;51&lt;/td&gt;
      &lt;td&gt;486&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6月&lt;/td&gt;
      &lt;td&gt;338&lt;/td&gt;
      &lt;td&gt;266&lt;/td&gt;
      &lt;td&gt;141&lt;/td&gt;
      &lt;td&gt;104&lt;/td&gt;
      &lt;td&gt;266&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7月&lt;/td&gt;
      &lt;td&gt;829&lt;/td&gt;
      &lt;td&gt;126&lt;/td&gt;
      &lt;td&gt;92&lt;/td&gt;
      &lt;td&gt;106&lt;/td&gt;
      &lt;td&gt;212&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8月&lt;/td&gt;
      &lt;td&gt;927&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;129&lt;/td&gt;
      &lt;td&gt;164&lt;/td&gt;
      &lt;td&gt;147&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9月&lt;/td&gt;
      &lt;td&gt;1210&lt;/td&gt;
      &lt;td&gt;108&lt;/td&gt;
      &lt;td&gt;130&lt;/td&gt;
      &lt;td&gt;255&lt;/td&gt;
      &lt;td&gt;116&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10月&lt;/td&gt;
      &lt;td&gt;792&lt;/td&gt;
      &lt;td&gt;177&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;233&lt;/td&gt;
      &lt;td&gt;663&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11月&lt;/td&gt;
      &lt;td&gt;450&lt;/td&gt;
      &lt;td&gt;167&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;310&lt;/td&gt;
      &lt;td&gt;704&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12月&lt;/td&gt;
      &lt;td&gt;686&lt;/td&gt;
      &lt;td&gt;675&lt;/td&gt;
      &lt;td&gt;204&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;740&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;総計&lt;/td&gt;
      &lt;td&gt;6660&lt;/td&gt;
      &lt;td&gt;4054&lt;/td&gt;
      &lt;td&gt;2622&lt;/td&gt;
      &lt;td&gt;1828&lt;/td&gt;
      &lt;td&gt;4232&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;学習&quot;&gt;学習&lt;/h3&gt;

&lt;p&gt;読書やあとで読むの処理などの学習活動はStudyPlusで管理しているので、StudyPlusの学習量を集計します。StudyPlusは11月から再開したので、そこからの記録しかありません。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;期間&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;Pocket&lt;/th&gt;
      &lt;th&gt;ユースケース駆動開発実践ガイド&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-11-19 - 2018-11-25&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-11-26 - 2018-12-02&lt;/td&gt;
      &lt;td&gt;343&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-03 - 2018-12-09&lt;/td&gt;
      &lt;td&gt;256&lt;/td&gt;
      &lt;td&gt;171&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-10 - 2018-12-16&lt;/td&gt;
      &lt;td&gt;243&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-17 - 2018-12-23&lt;/td&gt;
      &lt;td&gt;209&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-24 - 2018-12-30&lt;/td&gt;
      &lt;td&gt;291&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-31 - 2019-01-06&lt;/td&gt;
      &lt;td&gt;209&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;こうしてみると、Pocketのあとで読む記事をよく読み流しているなと思いますが、それでもあとで読む残数が一向に減っていかないので、ため込みすぎていますね。いえ、ため込むことを悪いことだとは思っていないので、やはりレコメンドしてくれる仕組みが欲しいところです。&lt;/p&gt;

&lt;p&gt;ユースケース駆動開発実践ガイドを読み進めていますが、あまり進んでいる感じがしないのは、手法を実際に使いながらページを戻ったり進んだりしているからです。とはいえ、いつまで経っても終わらないのは気持ち悪いので、ここらで読み終えてしまおうと思います。&lt;/p&gt;

&lt;h3 id=&quot;習慣&quot;&gt;習慣&lt;/h3&gt;

&lt;p&gt;マインドフルネス、エクササイズなどの習慣活動はCoach.meで管理しているので、Coach.meのチェックインを集計します。Coach.meは10月から再開したので、そこからの記録しかありません。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;期間&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;Accomplish 1 Most Important Task&lt;/th&gt;
      &lt;th&gt;Mindfulness meditation&lt;/th&gt;
      &lt;th&gt;Exercise&lt;/th&gt;
      &lt;th&gt;Read&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-10-01 - 2018-10-07&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-10-08 - 2018-10-14&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-10-15 - 2018-10-21&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-10-22 - 2018-10-28&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-10-29 - 2018-11-04&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-11-05 - 2018-11-11&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-11-12 - 2018-11-18&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-11-19 - 2018-11-25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-11-26 - 2018-12-02&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-03 - 2018-12-09&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-10 - 2018-12-16&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-17 - 2018-12-23&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-24 - 2018-12-30&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-31 - 2019-01-06&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;このデータも、ここから有意な何かを読み取ることは難しい…KPTでも述べますが、エクササイズをがんばりましょう、くらいで。&lt;/p&gt;

&lt;p&gt;マインドフルネスは「寝たままヨガ」を就寝時に使っていますが、本来の使い方はこうではないはずなので、ちょっと考えます。&lt;/p&gt;

&lt;h3 id=&quot;睡眠&quot;&gt;睡眠&lt;/h3&gt;

&lt;p&gt;睡眠はRuntastic Sleep Betterで管理しているので、浅い・深い睡眠時間の平均を算出します。Runtastic Sleep Betterは12月から使用開始したので、そこからの記録しかありません。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;em&gt;期間&lt;/em&gt;&lt;/th&gt;
      &lt;th&gt;浅い睡眠(min)&lt;/th&gt;
      &lt;th&gt;浅い睡眠(割合)&lt;/th&gt;
      &lt;th&gt;深い睡眠(min)&lt;/th&gt;
      &lt;th&gt;深い睡眠(割合)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-03 - 2018-12-09&lt;/td&gt;
      &lt;td&gt;71.25&lt;/td&gt;
      &lt;td&gt;23%&lt;/td&gt;
      &lt;td&gt;222.5&lt;/td&gt;
      &lt;td&gt;69%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-10 - 2018-12-16&lt;/td&gt;
      &lt;td&gt;130.4&lt;/td&gt;
      &lt;td&gt;40%&lt;/td&gt;
      &lt;td&gt;176&lt;/td&gt;
      &lt;td&gt;54%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-17 - 2018-12-23&lt;/td&gt;
      &lt;td&gt;101.8&lt;/td&gt;
      &lt;td&gt;31%&lt;/td&gt;
      &lt;td&gt;210&lt;/td&gt;
      &lt;td&gt;62%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-24 - 2018-12-30&lt;/td&gt;
      &lt;td&gt;97.8&lt;/td&gt;
      &lt;td&gt;29%&lt;/td&gt;
      &lt;td&gt;207.2&lt;/td&gt;
      &lt;td&gt;65%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-12-31 - 2019-01-06&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;38%&lt;/td&gt;
      &lt;td&gt;117.75&lt;/td&gt;
      &lt;td&gt;55%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;睡眠ログは、取得できていない日があったり、昼寝したためによる睡眠時間が極端に短かったりと、よいデータが取れていないと思っています。しかし、それにしても深い睡眠の時間と割合が少なすぎます。&lt;/p&gt;

&lt;p&gt;一般的に&lt;a href=&quot;https://www.sleepstyles.jp/about/archive/986.html&quot;&gt;ノンレム睡眠(深い睡眠)は睡眠時間の80%&lt;/a&gt;と言われているようです。自分は特にショートスリーパーというわけではないので、やはり8時間(最低でも6時間)睡眠はしたいところです。ということは、「8hour(480min) * 80% = 384min」が深い睡眠の基準となります。しかし、全っっっ然足りていません。&lt;/p&gt;

&lt;h3 id=&quot;2018年の興味があったワード&quot;&gt;2018年の興味があったワード&lt;/h3&gt;

&lt;p&gt;2018年のTwitterワードクラウドを取得して、何に興味があったかを分析する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2019-01-08-2018-retrospective/word-cloud.jpeg&quot; alt=&quot;word cloud&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pocket、Qiita、SpeakerDeckが大きいのは置いておいて、意味がありそうな単語だと「目標」「Redmine」でしょうか。そんなにツイートしてたかなぁ…？&lt;/p&gt;

&lt;h2 id=&quot;2018年の感想keepproblem&quot;&gt;2018年の感想(Keep、Problem)&lt;/h2&gt;

&lt;p&gt;2018年の感想を、ミッション・ステートメントの項目ごとにKeepとProblemで整理してみます。&lt;/p&gt;

&lt;p&gt;まず、Keep(よかったこと、続けていきたいこと)について。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;人生
    &lt;ul&gt;
      &lt;li&gt;(保留)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;仕事
    &lt;ul&gt;
      &lt;li&gt;お客様が抱えていた大きめの問題の1つを解決するシステムを構築しました。運用はこれからですが、大きな前進です。&lt;/li&gt;
      &lt;li&gt;余力を残しながらリーダー業務を実施することができました。つまり、担当案件以外にも少しずつですが手を出すことができています。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;社会
    &lt;ul&gt;
      &lt;li&gt;(保留)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;成長
    &lt;ul&gt;
      &lt;li&gt;プロダクトをいくつかリリースできました。あくまで自分用ですが、アウトプットしたかったので、よしです。&lt;/li&gt;
      &lt;li&gt;クローラーをいくつか構築・運用しました。以前から興味があった分野のデータ収集を開始しました。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;経済
    &lt;ul&gt;
      &lt;li&gt;自分(家庭ではなく)の支出を把握するべくZaimに記録していますが、当初より無駄な支出が減ってきています。目標範囲までもう少し。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;家庭
    &lt;ul&gt;
      &lt;li&gt;大きなけがや病気などなく、とりあえずではありますが、やり過ごせました。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次にProblem(問題だと感じていること)について。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;人生
    &lt;ul&gt;
      &lt;li&gt;(保留)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;仕事
    &lt;ul&gt;
      &lt;li&gt;お客様の社内政治的なゴタゴタをうまく整理できず、当初考えていたほどの成果が出せていません。&lt;/li&gt;
      &lt;li&gt;ブレブレになる方向性を誘導することにも半ば失敗しています。&lt;/li&gt;
      &lt;li&gt;現プロジェクトの職場が遠すぎて、通勤時間が地獄。会社からは今の仕事を広げるように言われているし、本当、どうしようか…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;社会
    &lt;ul&gt;
      &lt;li&gt;(保留)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;成長
    &lt;ul&gt;
      &lt;li&gt;何かいろいろ手を動かしたけど、それが意義のある成果になっていないので、徒労感が半端ないです。&lt;/li&gt;
      &lt;li&gt;クローラーを作っていたのは、データ収集・分析して役立てたいことがあったからなのですけど、役立つところまでは到達できませんでした。&lt;/li&gt;
      &lt;li&gt;ブログのアウトプットも少ないので、自分の中のもやもやを吐き出せていないです。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;経済
    &lt;ul&gt;
      &lt;li&gt;出費はなるべく抑え気味にしていますが、「仕事以外の収入を確保」までは到達できていません。まぁこれは時間がかかると思っているので、仕方なし。&lt;/li&gt;
      &lt;li&gt;仕事の残業がなくなった割に通勤時間がすごく長くなってしまったので、全体的に収入減です。結構な危機なので、来年は対応しないと。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;家庭
    &lt;ul&gt;
      &lt;li&gt;片付いてもいないし、論理的に整理することもできていません。「なんとかやり過ごした」という感じ。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、全体的に「なんとかやり過ごした」「意義のある成果がない」「結構ピンチ」な年になってしまいました。&lt;/p&gt;

&lt;h2 id=&quot;2019年のミッションステートメント&quot;&gt;2019年のミッション・ステートメント&lt;/h2&gt;

&lt;p&gt;さて、2018年を振り返ったので、次は2019年のことを考えましょう。まずは、ミッション・ステートメントを見直します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;人生
    &lt;ul&gt;
      &lt;li&gt;家族・親族・仕事仲間と細く長く関係を持つ&lt;/li&gt;
      &lt;li&gt;多くの人と関係を持つことは得意ではないので、それは目指さない&lt;/li&gt;
      &lt;li&gt;ある程度の距離感は必要だと思う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;仕事
    &lt;ul&gt;
      &lt;li&gt;ハイスキルなメンバーを持つチームをリーダーとして運営する&lt;/li&gt;
      &lt;li&gt;顧客に「問題定義・解決力・エンジニアリング」を価値として提供する&lt;/li&gt;
      &lt;li&gt;仕事面で「自分は何者か」を示せるように、ポートフォリオを持つ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;社会
    &lt;ul&gt;
      &lt;li&gt;「問題定義からエンジニアリングまでできる」人として認識される&lt;/li&gt;
      &lt;li&gt;「音楽・小説・絵画を構築できる」人として認識される&lt;/li&gt;
      &lt;li&gt;社会的に大きな意義のあることをなしたいわけではない…今のところ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;成長
    &lt;ul&gt;
      &lt;li&gt;要求・設計・実装・運用を矛盾なく定義する&lt;/li&gt;
      &lt;li&gt;仕事だけでなく個人趣味も含めて「自分が何者か」を示せるように、ポートフォリオ(プロダクト、ブログ)を持つ&lt;/li&gt;
      &lt;li&gt;データ収集・分析の仕組みを運用して、ナレッジや財務に反映する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;経済
    &lt;ul&gt;
      &lt;li&gt;無駄な出費を抑え、自分や家族に投資する&lt;/li&gt;
      &lt;li&gt;仕事以外の収入を得る&lt;/li&gt;
      &lt;li&gt;将来的に、親世代や子供世代を世話できる財力を得る&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;健康
    &lt;ul&gt;
      &lt;li&gt;天気による影響を受けない&lt;/li&gt;
      &lt;li&gt;肥満や生活習慣病を避ける&lt;/li&gt;
      &lt;li&gt;睡眠負債を抱えない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;家庭
    &lt;ul&gt;
      &lt;li&gt;定期的に旅行に行く&lt;/li&gt;
      &lt;li&gt;物事を論理的に整理して、生活をシンプルにする&lt;/li&gt;
      &lt;li&gt;自宅を整理して、過ごしやすい環境とする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2018年のミッション・ステートメントは「こうなりたい」と「こうしたい」が混ざっていたので、なるべく「こうなりたい」に変更しました。だいぶ大きなことを言っている感はありますが、あくまで「こうなりたい」なので、これでいいです。&lt;/p&gt;

&lt;p&gt;全体的に「3年以内くらいにこうなりたい」をイメージして作成しました。これらは月次レビューで少しずつ見直します。ただ、自分の性格が大きく反映されているので、この内容が大きく変わることはないと思います。言い回しを変える、くらいで。&lt;/p&gt;

&lt;h2 id=&quot;2019年の目標try&quot;&gt;2019年の目標(Try)&lt;/h2&gt;

&lt;p&gt;では、このミッション・ステートメントのような自分になるため、今年は何をするかを考えましょう。あまり多くの目標を設定しても混乱してしまうので、ミッション・ステートメントの全体をカバーはできませんが、5個に留めます。&lt;/p&gt;

&lt;h3 id=&quot;ブログへのアウトプット&quot;&gt;ブログへのアウトプット&lt;/h3&gt;

&lt;p&gt;「自分が何者か」を示すため、また「～できる」人として認識されるため、発信する必要があります。ブログだとポートフォリオとしてちょっと弱いかなと思いますが、とにかくブログへのアウトプットを続けます。個人的にはブログですが、社内的には社内ポータルですかね。&lt;/p&gt;

&lt;p&gt;目標は、2018年と同じ &lt;strong&gt;27本&lt;/strong&gt; とします。平均して2週間ごとにブログにアウトプット、という感じで。&lt;/p&gt;

&lt;h3 id=&quot;個人プロダクトのリリース-1&quot;&gt;個人プロダクトのリリース&lt;/h3&gt;

&lt;p&gt;これも上記と同じ、ポートフォリオの一つです。あと、「データ収集・分析の仕組み」を運用したいですし、「欲しい機能があるけどちょうどよいサービスがない」という課題もあるので、個人プロダクトのリリースを続けます。&lt;/p&gt;

&lt;p&gt;目標は、 &lt;strong&gt;バージョン1.0.0レベルのリリースを4本&lt;/strong&gt; とします。1シーズンに1プロダクトを正式リリース、という感じで。&lt;/p&gt;

&lt;h3 id=&quot;要求から運用までの手順の確立&quot;&gt;要求から運用までの手順の確立&lt;/h3&gt;

&lt;p&gt;何かを思いついてから、問題を定義して、要求を整理して、設計して、実装して、運用するまでの手順を確立したいです。参考となる知識・手法はある程度見えていて、TOC、ICONIX、DDD、RDRAを組み合わせることで、自分で納得できる手順が見えると思っています。個人プロダクトの作業や可能であれば仕事にも取り込んで、検証していきます。&lt;/p&gt;

&lt;p&gt;目標は、上記の &lt;strong&gt;作業プロセスを整理して何らかの形でアウトプットする&lt;/strong&gt; 、とします。たぶん、GitHubのリリースとブログへのアウトプットになると思います。&lt;/p&gt;

&lt;h3 id=&quot;仮想投資の運用&quot;&gt;仮想投資の運用&lt;/h3&gt;

&lt;p&gt;「仕事以外の収入を得る」に繋がりますが、何らかの投資による資産運用を考えています。投資というと株式投資がパッと思い浮かびますが、競馬・競輪などのギャンブル、不動産運用など、他にもあるはずです。で、いきなりそこに手を出したくはないので、仮想投資を始めたいです。&lt;/p&gt;

&lt;p&gt;目標は、 &lt;strong&gt;仮想投資で継続的に資産増加となる運用を行う&lt;/strong&gt; 、とします。いや、この時点で相当難しいとは思いますが、とりあえずは運用を開始して、運用モデルを継続的に改善していくことはしたいです。&lt;/p&gt;

&lt;h3 id=&quot;エクササイズの継続&quot;&gt;エクササイズの継続&lt;/h3&gt;

&lt;p&gt;最低限のエクササイズですら、習慣化に失敗しています。しかし、現在の仕事状況や家事状況では、ジムに通うことはできないと考えています。なので、やはりエクササイズの習慣化を行うことしか今はできないと考えます。&lt;/p&gt;

&lt;p&gt;目標は、 &lt;strong&gt;最低限のエクササイズを週に3回&lt;/strong&gt; 行う、とします。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;振り返ってかえってもやっとしましたが、このもやもやを解消するためにも、目標に向かって進んでいきましょう。また、実は個人的に週次レビュー・月次レビューをしていまして、レビュー方針も固まってきたので、レビューをアウトプットしたいと思います。&lt;/p&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="振り返り" /><summary type="html">あけましておめでとうございます。本年もよろしくお願いいたします。</summary></entry><entry><title type="html">Raspberry Pi 3 Model B+を購入してからヘッドレスでsshできるようにするまでの5ステップと、ハマりポイント</title><link href="/2018/12/20/setup-raspberry-pi-3-model-b-plus-headless.html" rel="alternate" type="text/html" title="Raspberry Pi 3 Model B+を購入してからヘッドレスでsshできるようにするまでの5ステップと、ハマりポイント" /><published>2018-12-20T00:00:00+09:00</published><updated>2018-12-20T00:00:00+09:00</updated><id>/2018/12/20/setup-raspberry-pi-3-model-b-plus-headless</id><content type="html" xml:base="/2018/12/20/setup-raspberry-pi-3-model-b-plus-headless.html">&lt;p&gt;購入直後のRaspberry Pi Model B+にRaspbian Stretch Liteをインストールして、ヘッドレスでssh接続するまでの手順を説明します。&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;簡単なWebアプリケーションやちょっとしたジョブを稼働させたくて、Raspberry Pi 3 Model B+(以降、RaspberryPiと呼びます)を購入しました。以前に&lt;a href=&quot;/2015/01/23/setup-raspberry-pi-by-displayless.html&quot;&gt;Raspberry Pi Model B+をセットアップ&lt;/a&gt;しましたが、OSがバージョンアップしたため当時の手順は使えませんでした。&lt;/p&gt;

&lt;p&gt;この記事では、RaspberryPiをディスプレイやキーボードを接続せずに、つまりヘッドレスでRaspbian Stretch Liteをインストールして、PCなどのsshクライアントからRaspberryPiに接続するまでの手順を説明します。&lt;/p&gt;

&lt;p&gt;この記事の手順では、とりあえずRaspberryPiを起動してssh接続するまでなので、このままではインターネットに公開などできませんし、いくつかの設定作業が残っています。これらは少しの手作業とAnsibleを使った一括設定を行う予定ですが、別の記事で説明します。&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;p&gt;次の機材が必要となります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Raspberry Pi 3 Model B+ RS版&lt;/li&gt;
  &lt;li&gt;microUSB電源 5V/3.0A
    &lt;ul&gt;
      &lt;li&gt;RaspberryPiの仕様は2.5A&lt;/li&gt;
      &lt;li&gt;2.0Aでは起動しませんでした&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;microSD 16GB
    &lt;ul&gt;
      &lt;li&gt;microSD-&amp;gt;SD変換アダプターも必要&lt;/li&gt;
      &lt;li&gt;容量は、8GB以上が望ましいです&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MacBookPro
    &lt;ul&gt;
      &lt;li&gt;筆者はMacBookProを使用しましたが、microSDカードへの書き込みができるのであれば、Windows PCでも問題ありません&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;筆者はRaspberryPiとmicroUSB電源を秋葉原の秋月電子で購入しましたが、Amazonなどでも購入することができます。購入サイトによって価格が異なりますので注意が必要です。&lt;/p&gt;

&lt;p&gt;上記の機材だけでも作業は可能ですが、トラブルに遭遇した時の原因調査に困るので、できれば次の機材も用意したほうがよいです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;USB有線キーボード&lt;/li&gt;
  &lt;li&gt;HDMIケーブル、ディスプレイ
    &lt;ul&gt;
      &lt;li&gt;テレビにHDMI接続できる場合が多いです&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用機材にMacBookProをあげた通り、PC側の作業手順はMacBookProを想定して説明します。Windows PCでも同様の作業はできますので、適宜読み替えてください。&lt;/p&gt;

&lt;h2 id=&quot;手順&quot;&gt;手順&lt;/h2&gt;

&lt;p&gt;それでは、実際のセットアップ手順を説明します。&lt;/p&gt;

&lt;h3 id=&quot;raspbianをダウンロードする&quot;&gt;Raspbianをダウンロードする&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/raspbian/&quot;&gt;Download Raspbian for Raspberry Pi&lt;/a&gt;からRaspbian Stretch Liteをダウンロードします。&lt;/p&gt;

&lt;p&gt;同ページにハッシュ値が記載されていますので、ダウンロードが終了したらダッシュ値が一致することを確認します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ openssl sha256 2018-11-13-raspbian-stretch-lite.zip 
SHA256(2018-11-13-raspbian-stretch-lite.zip)= 47ef1b2501d0e5002675a50b6868074e693f78829822eef64f3878487953234d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;microsdにraspbianをインストールする&quot;&gt;microSDにRaspbianをインストールする&lt;/h3&gt;

&lt;p&gt;zipファイルを展開します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ unzip 2018-11-13-raspbian-stretch-lite.zip
Archive:  2018-11-13-raspbian-stretch-lite.zip
  inflating: 2018-11-13-raspbian-stretch-lite.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;microSDのマウント・ポイントを確認します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil list
/dev/disk0 (internal, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *121.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                 Apple_APFS Container disk1         120.5 GB   disk0s2

/dev/disk1 (synthesized):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      APFS Container Scheme -                      +120.5 GB   disk1
                                 Physical Store disk0s2
   1:                APFS Volume OSX                     114.0 GB   disk1s1
   2:                APFS Volume Preboot                 22.4 MB    disk1s2
   3:                APFS Volume Recovery                514.7 MB   disk1s3
   4:                APFS Volume VM                      2.1 GB     disk1s4

/dev/disk2 (internal, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *15.9 GB    disk2
   1:             Windows_FAT_32 boot                    46.0 MB    disk2s1
   2:                      Linux                         15.9 GB    disk2s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;容量を見ると、&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/disk2&lt;/code&gt;がmicroSDのマウント・ポイントだとわかります。&lt;/p&gt;

&lt;p&gt;microSDをFAT32でフォーマットします。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 当然ですが、microSDの内容は消去されます。また、デバイスの指定を間違えるとどえらいことになるので、要注意です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil eraseDisk FAT32 RPI /dev/disk2
Started erase on disk2
Unmounting disk
Creating the partition map
Waiting for partitions to activate
Formatting disk2s2 as MS-DOS (FAT32) with name RPI
512 bytes per physical sector
/dev/rdisk2s2: 30673616 sectors in 1917101 FAT32 clusters (8192 bytes/cluster)
bps=512 spc=16 res=32 nft=2 mid=0xf8 spt=32 hds=255 hid=411648 drv=0x80 bsec=30703616 bspf=14978 rdcl=2 infs=1 bkbs=6
Mounting disk
Finished erase on disk2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;microSDをアンマウントします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diskutil unmountDisk /dev/disk2
Unmount of all volumes on disk2 was successful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;microSDにRaspbianイメージを書き込みます。この作業は数分かかります。応答が返ってこなくてもしばらく放置しましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dd if=2018-11-13-raspbian-stretch-lite.img of=/dev/disk2 bs=1m conv=sync
1780+0 records in
1780+0 records out
1866465280 bytes transferred in 702.735738 secs (2655999 bytes/sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;事前設定ssh有効化wi-fi設定を行う&quot;&gt;事前設定(SSH有効化、Wi-Fi設定)を行う&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; これらの作業は、ディスプレイと有線キーボードを使用するのであれば、RaspberryPiの起動後に&lt;code class=&quot;highlighter-rouge&quot;&gt;raspi-setup&lt;/code&gt;コマンドで行うことができます。この記事では、ヘッドレス作業のため、RaspberryPi起動前に行います。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;microSDのルート・フォルダに移動します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /Volumes/boot/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SSH機能を有効化するため、&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;ファイルを作成します。これは空ファイルでよいです。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wi-Fiを設定するため、&lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_supplicant.conf&lt;/code&gt;ファイルを作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat wpa_supplicant.conf 
country=JP
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
    ssid=&quot;{SSID}&quot;
    psk=&quot;{暗号キー}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;暗号キーは、&lt;a href=&quot;https://www.wireshark.org/tools/wpa-psk.html&quot;&gt;Wireshark · WPA PSK Generator&lt;/a&gt;などでSSIDとパスフレーズから生成できます。ルーターによっては、PSK設定項目があることがあるので、その場合はそこに設定されている値を使用します。&lt;/p&gt;

&lt;h3 id=&quot;raspberrypiを起動する&quot;&gt;RaspberryPiを起動する&lt;/h3&gt;

&lt;p&gt;microSDを取り出す準備をします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd
$ diskutil eject /dev/disk2
Disk /dev/disk2 ejected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コマンドが成功したら、microSDをPCから実際に取り出します。&lt;/p&gt;

&lt;p&gt;RaspberryPiにmicroSDを挿入して、電源に接続します。RaspberryPiに電源スイッチはなく、電源に接続すると自動的に起動します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; HDMIケーブルやUSBキーボードなど他の機器を接続する場合、まず電源ケーブル以外の機器を接続して、最後に電源ケーブルを接続します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pcからraspberrypiにssh接続する&quot;&gt;PCからRaspberryPiにssh接続する&lt;/h3&gt;

&lt;p&gt;電源に接続して数分で起動が終了します。設定に問題がなければ、RaspberryPiが無線LANに接続されているはずです。ルーターのDHCP機能などで割当IPアドレスリストを見ると、IPアドレスが増えていることがわかると思います。&lt;/p&gt;

&lt;p&gt;PCからRaspberryPiにssh接続します。初期ユーザーは&lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt;、パスワードは&lt;code class=&quot;highlighter-rouge&quot;&gt;raspberry&lt;/code&gt;となっています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh pi@raspberrypi.local

Linux raspberrypi 4.14.79-v7+ #1159 SMP Sun Nov 4 17:50:20 GMT 2018 armv7l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Wed Dec 19 05:55:53 2018 from 192.168.3.2
pi@raspberrypi:~ $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;macOSやWindowsでもBonjourがインストールされていれば、&lt;code class=&quot;highlighter-rouge&quot;&gt;raspberrypi.local&lt;/code&gt;でRaspberryPiを発見することができます。これで接続できない場合は、ルーターのDHCP機能などでIPアドレスを調べてください。&lt;/p&gt;

&lt;h2 id=&quot;ハマりポイント&quot;&gt;ハマりポイント&lt;/h2&gt;

&lt;h3 id=&quot;microsdのフォーマットはfat32でなければならない&quot;&gt;microSDのフォーマットはFAT32でなければならない&lt;/h3&gt;

&lt;p&gt;例えばディスク・ユーティリティなどで&lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/sdxc_formatting.md&quot;&gt;exFATでフォーマットしてしまうと、RaspberryPiは起動しない&lt;/a&gt;ようです。その場合、FAT32でフォーマットしなおしてください。&lt;/p&gt;

&lt;h3 id=&quot;電源が不足していると起動しない&quot;&gt;電源が不足していると起動しない&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/&quot;&gt;Raspberry Pi 3 Model B+の仕様&lt;/a&gt;によると、5V/2.5Aの電源が必要となります。試しに手元にあった5V/2.0A(スマホ充電用)の電源をRaspberryPiに接続してみましたが、起動しませんでした。&lt;a href=&quot;http://chiken-stock.com/2018/05/16/raspiproblem/&quot;&gt;同様の問題が報告&lt;/a&gt;されています。&lt;/p&gt;

&lt;h3 id=&quot;microsdの相性が悪い&quot;&gt;microSDの相性が悪い&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/sff1019/items/83fcbe72387fe12ddccc&quot;&gt;microSDの相性が悪いと起動しない&lt;/a&gt;ようです。筆者はこの問題に遭遇したことはありません。&lt;/p&gt;

&lt;h2 id=&quot;所感&quot;&gt;所感&lt;/h2&gt;

&lt;p&gt;とりあえず、RaspberryPiを使えるように最低限のセットアップを行いました。この手順が手作業なのは仕方ありませんが、次のOSセットアップやソフトウェア・セットアップは可能な限り自動化する予定です。&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/y_k/items/2e37583d4a5dcf81dc19&quot;&gt;【ヘッドレス】Raspberry Pi 3 セットアップ for macOS - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/nori-dev-akg/items/a8361e728a66a8c3bdba&quot;&gt;RaspberryPi Raspbian ヘッドレスインストール - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/01/23/setup-raspberry-pi-by-displayless.html&quot;&gt;Raspberry Piセットアップメモ(ディスプレイレス) - u6k.Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/sdxc_formatting.md&quot;&gt;Formatting an SDXC card for use with NOOBS - Raspberry Pi Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/&quot;&gt;Raspberry Pi 3 Model B+ - Raspberry Pi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chiken-stock.com/2018/05/16/raspiproblem/&quot;&gt;Raspberry pi 3 が起動しない場合の対処法 | 日々の知見ストック&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/sff1019/items/83fcbe72387fe12ddccc&quot;&gt;Raspberry Pi B+ で起動しない問題について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="Raspberry Pi" /><category term="サーバー構築" /><summary type="html">購入直後のRaspberry Pi Model B+にRaspbian Stretch Liteをインストールして、ヘッドレスでssh接続するまでの手順を説明します。</summary></entry><entry><title type="html">Windows 10のデータ通信を抑制する</title><link href="/2018/06/25/suppress-network-access-of-windows-10.html" rel="alternate" type="text/html" title="Windows 10のデータ通信を抑制する" /><published>2018-06-25T00:00:00+09:00</published><updated>2018-06-25T00:00:00+09:00</updated><id>/2018/06/25/suppress-network-access-of-windows-10</id><content type="html" xml:base="/2018/06/25/suppress-network-access-of-windows-10.html">&lt;p&gt;自分はMicrosoft Surface Pro 4を使っていますが、何も考えずにテザリングすると、あっという間にデータ通信量がGBを越えてしまいます。&lt;/p&gt;

&lt;p&gt;ここでは、データ通信を抑制するためにやったことを整理します。&lt;/p&gt;

&lt;h2 id=&quot;wi-fiを従量課金接続に設定する&quot;&gt;Wi-Fiを従量課金接続に設定する&lt;/h2&gt;

&lt;p&gt;Wi-Fiを従量課金接続として設定することで、次の効果が得られるようです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows Update で、優先度の高い更新プログラムだけが更新される&lt;/li&gt;
  &lt;li&gt;Windows ストアからのアプリのダウンロードが一時停止される&lt;/li&gt;
  &lt;li&gt;スタート画面のタイルで表示されていた情報の更新が停止する&lt;/li&gt;
  &lt;li&gt;OneDriveで、オフラインファイルが自動で同期されない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;従量課金接続として設定することで、Windowsはデータ通信がある程度抑制されますが、他のアプリケーションまで抑制されるとは限りませんし、Windows Updateについても優先度が高いプログラムは自動更新されてしまうので、この設定だけでは不十分です。とはいえ、効果はあるので設定しておきます。&lt;/p&gt;

&lt;p&gt;設定は、次の手順で行います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;スタート → 設定 → ネットワークとインターネット → Wi-Fi → 接続済みのWi-Fiをクリックします。&lt;/li&gt;
  &lt;li&gt;「従量課金接続として設定する」をオンにします。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定からは、どのアプリケーションがどの程度の通信を行ったのかを参照する機能もあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ネットワークとインターネット → データ使用状況&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参考リンク&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://support.microsoft.com/ja-jp/help/4028458/windows-metered-connections-in-windows-10&quot;&gt;Windows 10 での従量制課金接続&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ahiru8usagi.hatenablog.com/entry/Windows10_DataTraffic&quot;&gt;Windows10でデータ通信量を確認する方法、データ節約設定方法、大容量格安sim比較！ - あんりふ！&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;windows-updateの自動更新を無効化する&quot;&gt;Windows Updateの自動更新を無効化する&lt;/h2&gt;

&lt;p&gt;「データ使用状況」を確認すると、「システム」とやらがとんでもない勢いで通信していることがわかると思います。詳細の調査はしていませんが、Windows Updateの通信が大きいように感じます。そこで、Windows Updateの自動更新を無効化してしまいます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 定期的にWindows Updateを手動更新すること。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Windows 10 HomeとProで手順が異なるようですが、ここではProの場合の手順を説明します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;グループポリシーエディターを起動します&lt;/li&gt;
  &lt;li&gt;コンピューターの構成 → 管理用テンプレート → Windowsコンポーネント → Windows Update&lt;/li&gt;
  &lt;li&gt;「自動更新を構成する」を無効に設定します&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こうすることで、Windows Updateを手動でチェックしないとダウンロードされないようになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参考リンク
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.japan-secure.com/entry/how_to_disable_the_automatic_update_by_windows_update_of_windows_10.html&quot;&gt;「Windows 10」の「Windows Update」の自動更新を無効にする方法&lt;/a&gt;
  &lt;a href=&quot;http://ascii.jp/elem/000/001/118/1118658/&quot;&gt;ASCII.jp：Windows 10 ProでWindows Updateの動作を制御する (1/2)｜Windows Info&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ファイル共有サービスを停止する&quot;&gt;ファイル共有サービスを停止する&lt;/h2&gt;

&lt;p&gt;筆者はDropboxを利用していますが、こやつは従量課金接続に設定しても容赦なくデータ通信を行います。そこで、これを停止します。&lt;/p&gt;

&lt;p&gt;注意として、単純にDropboxを終了しても”Dropbox Update”というプロセスがしつこく通信していたため、これも終了した方が良いようです。&lt;/p&gt;

&lt;h2 id=&quot;アプリケーションの自動バージョンチェックを無効化する&quot;&gt;アプリケーションの自動バージョンチェックを無効化する&lt;/h2&gt;

&lt;p&gt;Docker、Visual Studio Code、SorceTreeなど、多くのアプリケーションが起動時に自動バージョンチェックを行います。これが大きな通信を行うことがあるので、無効化します。無効化の手順はアプリケーションごとに異なります。&lt;/p&gt;

&lt;p&gt;そもそも、筆者はChocolateyでアプリケーションを管理しているため、自動バージョンチェックは不必要です。この機会に無効化しておこう…&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これらの設定を行ったことで、「いきなり3GBの通信を行っていた」みたいな衝撃事件はなくなりました。今のところは。&lt;/p&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="Windows" /><summary type="html">自分はMicrosoft Surface Pro 4を使っていますが、何も考えずにテザリングすると、あっという間にデータ通信量がGBを越えてしまいます。</summary></entry><entry><title type="html">パスワード管理手順(デジタル + アナログ)</title><link href="/2018/06/21/password-management.html" rel="alternate" type="text/html" title="パスワード管理手順(デジタル + アナログ)" /><published>2018-06-21T00:00:00+09:00</published><updated>2018-06-21T00:00:00+09:00</updated><id>/2018/06/21/password-management</id><content type="html" xml:base="/2018/06/21/password-management.html">&lt;p&gt;利用するWebサービスが増えるにつれて、管理するパスワードも増えていきます。しかし、人間の記憶力でこれらのパスワードを記憶することなどできません。&lt;/p&gt;

&lt;p&gt;この記事では、筆者が実践しているパスワード管理の手順を説明します。&lt;/p&gt;

&lt;h2 id=&quot;基本的なパスワードポリシー&quot;&gt;基本的なパスワード・ポリシー&lt;/h2&gt;

&lt;p&gt;いうまでもありませんが、パスワードの使いまわしや単純なパスワードはNGです。パスワードごとに、可能な限り長く(100文字以上)、英数記号を含むランダムな文字列を生成します。ただし、やんごとなき事情により手入力する可能性があるパスワードについては、短いパスワードを生成することがあります。&lt;/p&gt;

&lt;p&gt;また、可能な限り二要素認証を利用します。Google Authenticator、Authyなどのアプリケーションを利用しますが、サービスによってはSMSでトークンが送られてくることもあります。&lt;/p&gt;

&lt;h2 id=&quot;パスワード管理サービスlastpass&quot;&gt;パスワード管理サービス(LastPass)&lt;/h2&gt;

&lt;p&gt;上記のようなパスワードを人間の記憶力で覚えられるわけがありません。しかし、紙に書いて管理することも困難です。そこで、パスワード管理サービスを利用します。サービスは、次の要件を満たすものを利用します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PC、スマートフォンの両方から利用できる&lt;/li&gt;
  &lt;li&gt;強力なパスワード生成機能がある&lt;/li&gt;
  &lt;li&gt;パスワード以外もメモできる&lt;/li&gt;
  &lt;li&gt;サービス自体が二要素認証を利用できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;筆者は&lt;a href=&quot;https://www.lastpass.com/&quot;&gt;LastPass&lt;/a&gt;を利用しています。&lt;/p&gt;

&lt;p&gt;サービスには、パスワードの他に復旧手順なども一緒にメモしておきます。特に二要素認証を利用している場合は復旧手順が複雑になるため、忘れないようにメモしておきます。&lt;/p&gt;

&lt;h2 id=&quot;マスターパスワードポリシーoff-the-grid&quot;&gt;マスターパスワード・ポリシー(Off The Grid)&lt;/h2&gt;

&lt;p&gt;パスワード管理サービスのマスターパスワードをパスワード管理サービスで管理することはさすがにできないので、これは何らかの手段で記憶する必要があります。&lt;a href=&quot;https://www.ipa.go.jp/about/press/20140917.html&quot;&gt;IPAは紙にメモすることも手段の一つとして推奨&lt;/a&gt;しており、この手法は単純なパスワードを使用するよりよほど効果的ではありますが、紙を紛失してしまえばすぐにばれてしまいます。&lt;/p&gt;

&lt;p&gt;そこで、アナログなパスワード生成手段を利用することにします。アナログなパスワード生成手段はいくつかありますが、ここでは&lt;a href=&quot;https://www.grc.com/offthegrid.htm&quot;&gt;Off The Grid&lt;/a&gt;という手法を利用することにします。Off The Gridは要するに、暗号表を生成したうえで一定のルールでパスワードを生成する、という手法です。つまり、暗号表を見ただけではパスワードは分かりませんが、そのルールを知っていればパスワードを導き出すことができます。とはいえ、Off The Gridのルールそのままではわかる人にはわかってしまうので、筆者はさらに同くじルールを追加しています。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;パスワード管理は面倒ですが重要なことなので、サービスを便利に使いつつリスクも低減しましょう。&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Off The Grid
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://internet.watch.impress.co.jp/docs/news/473716.html&quot;&gt;紙だけでサイトごとに異なるパスワードを生成する暗号、米研究者が考案 -INTERNET Watch Watch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.grc.com/offthegrid.htm&quot;&gt;GRC | Off The Grid&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;別の手法
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.lifehacker.jp/2010/12/101222password_tabula_recta.html&quot;&gt;パスワードを記録し、暗号化するための、超アナログな方法 | ライフハッカー［日本版］&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IPAの勧告
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.ipa.go.jp/about/press/20140917.html&quot;&gt;プレス発表　パスワードリスト攻撃による不正ログイン防止に向けた呼びかけ：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;パスワードの使いまわしは、絶対ダメ&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;総務省の勧告
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.houdoukyoku.jp/posts/28671&quot;&gt;パスワード定期変更は逆に危険。その理由を総務省と内閣に聞いた | ホウドウキョク&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;パスワードの定期変更は不要(パスワードが十分に長く複雑な場合)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;六角暗号記帳
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.amacoto.com/&quot;&gt;デジタルエンディングノートにも。生成・変更もカンタン！パスワードノート。 - アマノコトワリ舎　自然と共に。パスワード管理ノート新発売！&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="機密情報管理" /><summary type="html">利用するWebサービスが増えるにつれて、管理するパスワードも増えていきます。しかし、人間の記憶力でこれらのパスワードを記憶することなどできません。</summary></entry><entry><title type="html">work-reportの素案</title><link href="/2018/06/12/planning-work-report.html" rel="alternate" type="text/html" title="work-reportの素案" /><published>2018-06-12T00:00:00+09:00</published><updated>2018-06-12T00:00:00+09:00</updated><id>/2018/06/12/planning-work-report</id><content type="html" xml:base="/2018/06/12/planning-work-report.html">&lt;p&gt;個人的にいわゆる週次レビューをしていましたが、これを簡略化するツールがほしいなと思ったので、ツールの素案を書いてみます。README駆動開発みたいなものです。&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;過去に週次レビュー(u6k.RedmineのWiki、u6k.BlogのThis Week I Learnedなど)をしていましたが、現在は滞っています。活動の集計やコメントする作業が非常に手間がかかるためです。&lt;/p&gt;

&lt;p&gt;GitHubでコードを管理しているので、コードを書くという活動量についてはGitHub Contributionを見ればある程度はわかります。興味があることもとりあえずTwitterに書いているので、twilogを見ればわかります。しかし、Wikiや多くのタスク、企画案などコードで表現できないものはu6k.Redmineで管理しており、こちらの活動は集計することが困難です。また、GitHub ContributionやTwitterも、ブログに書くとなると面倒です。&lt;/p&gt;

&lt;p&gt;なので、上記のことを集計して、「あとはコメントを書くだけ」という状態にしたブログ原稿を生成するツールがほしいです。&lt;/p&gt;

&lt;h2 id=&quot;要件&quot;&gt;要件&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;各種の活動をレポートとして生成してほしい
    &lt;ul&gt;
      &lt;li&gt;活動を収集する
        &lt;ul&gt;
          &lt;li&gt;GitHubのコミット、Issue更新など&lt;/li&gt;
          &lt;li&gt;Redmineのチケット更新、Wiki更新など&lt;/li&gt;
          &lt;li&gt;Pocketの増加、消化&lt;/li&gt;
          &lt;li&gt;Twitterのツイート&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;活動レポートを見たい
    &lt;ul&gt;
      &lt;li&gt;活動をレポートとして表示する
        &lt;ul&gt;
          &lt;li&gt;数量&lt;/li&gt;
          &lt;li&gt;ログ&lt;/li&gt;
          &lt;li&gt;カレンダー&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;活動をブログ記事として生成する
        &lt;ul&gt;
          &lt;li&gt;Jekyllページ形式&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;サンプル&quot;&gt;サンプル&lt;/h2&gt;

&lt;p&gt;こんな感じの記事を生成したいです。&lt;/p&gt;

&lt;h3 id=&quot;weekly-report-from-2018-06-04-to-2018-06-10&quot;&gt;Weekly Report (from 2018-06-04 to 2018-06-10)&lt;/h3&gt;

&lt;p&gt;2018-06-04から2018-06-10の活動のレポートです。&lt;/p&gt;

&lt;h4 id=&quot;リリース&quot;&gt;リリース&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;公開した記事
    &lt;ul&gt;
      &lt;li&gt;コメント&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;公開したプロダクトのバージョン
    &lt;ul&gt;
      &lt;li&gt;コメント&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;主なツイートとコメント&quot;&gt;主なツイートとコメント&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;ツイート
    &lt;ul&gt;
      &lt;li&gt;コメント&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;github&quot;&gt;GitHub&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;12 コミットしました。&lt;/li&gt;
  &lt;li&gt;Issueを 23 回更新しました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GitHub Contribution画像を表示&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;redmine&quot;&gt;Redmine&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;チケットを xx 回更新しました。
    &lt;ul&gt;
      &lt;li&gt;新規チケットを x 個作成しました。&lt;/li&gt;
      &lt;li&gt;チケットを x 個終了しました。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Wikiを xx 回更新しました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Redmine活動グラフを表示&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;twitter&quot;&gt;Twitter&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;xx 回ツイートしました。
    &lt;ul&gt;
      &lt;li&gt;x 回リツイートしました。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Twitter活動グラフを表示&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;pocket&quot;&gt;Pocket&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;xxxxx ページが未読です。&lt;/li&gt;
  &lt;li&gt;xx ページ追加しました。&lt;/li&gt;
  &lt;li&gt;xx ページアーカイブしました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pocket活動グラフを表示&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;author&quot;&gt;Author&lt;/h4&gt;

&lt;p&gt;authorを表示&lt;/p&gt;

&lt;h2 id=&quot;リポジトリ&quot;&gt;リポジトリ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/u6k/work-report&quot;&gt;u6k/work-report: 個人的な活動ログをレポートする - GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://redmine.u6k.me/projects/work-report&quot;&gt;概要 - work-report - u6k.Redmine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="企画" /><category term="レビュー" /><category term="ブログ" /><summary type="html">個人的にいわゆる週次レビューをしていましたが、これを簡略化するツールがほしいなと思ったので、ツールの素案を書いてみます。README駆動開発みたいなものです。</summary></entry><entry><title type="html">個人開発基盤の構成、およびデプロイ・フロー</title><link href="/2018/06/09/my-development-environment-and-deploy-workflow.html" rel="alternate" type="text/html" title="個人開発基盤の構成、およびデプロイ・フロー" /><published>2018-06-09T00:00:00+09:00</published><updated>2018-06-09T00:00:00+09:00</updated><id>/2018/06/09/my-development-environment-and-deploy-workflow</id><content type="html" xml:base="/2018/06/09/my-development-environment-and-deploy-workflow.html">&lt;p&gt;個人的にいくつかのアプリケーションを開発していまして、おひとりさま開発なので環境構築からリリース、運用まで全て自分で行っています。これらの作業の手間やミスを減らすため、可能な限り自動化しています。&lt;/p&gt;

&lt;p&gt;この記事では、開発基盤として利用しているサービス、およびデプロイ・フローの概要を説明します。&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;p&gt;インターネット上のサービスを利用しています。が、オンプレミスでも類似の基盤を構築することは可能です。具体的には、GitLabでいけるはず。&lt;/p&gt;

&lt;p&gt;開発するアプリケーションは、Dockerを前提としています。逆に言えば、Dockerで動作すれば言語処理系は問いません。&lt;/p&gt;

&lt;p&gt;この記事では、開発基盤を「開発してからリリースするまでの作業を効率化するために利用しているサービス群」のことを言います。&lt;/p&gt;

&lt;h2 id=&quot;開発基盤の構造&quot;&gt;開発基盤の構造&lt;/h2&gt;

&lt;p&gt;次のサービス群と流れで、開発からリリースまでの作業を行っています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/2b2995e13b71ef2839abfa915ff790f4.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;サービスの役割&quot;&gt;サービスの役割&lt;/h2&gt;

&lt;p&gt;サービスごとの役割を説明します。&lt;/p&gt;

&lt;h3 id=&quot;開発pc&quot;&gt;開発PC&lt;/h3&gt;

&lt;p&gt;開発PCには基本的に、エディター、Docker、gitがインストールされており、開発作業はDockerで行っています。開発するアプリケーションによって言語処理系が混在するのでOSを汚したくないのと、なるべく本番Dockerコンテナ構造に近い構成で開発をしたいためです。&lt;/p&gt;

&lt;p&gt;開発PCが手元にない場合、本番サーバーでvimとgitで開発を行うことがあります。というか、最近は仕事の都合でノートPCを持ち歩けないため、スマホから本番サーバーにsshして作業することが多いです。&lt;/p&gt;

&lt;p&gt;開発PCの場合、VisualStudioCode + SourceTreeを使うことが多いです。本番サーバーの場合、vim + git-flow + tig + tmuxで作業を行っています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;Docker Documentation | Docker Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/ja-jp/dev/products/code-vs.aspx&quot;&gt;Visual Studio Code - Visual Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vim.org/&quot;&gt;welcome home : vim online&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;Sourcetree | Free Git GUI for Mac and Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nvie/gitflow&quot;&gt;nvie/gitflow: Git extensions to provide high-level repository operations for Vincent Driessen’s branching model.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jonas/tig&quot;&gt;jonas/tig: Text-mode interface for git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;tmux/tmux: tmux source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;github&quot;&gt;GitHub&lt;/h3&gt;

&lt;p&gt;言わずと知れている、ソフトウェア開発プロジェクトのホスティング・サービスです。主にソースコードの管理をしています。課題やWikiなどはu6k.Redmineで管理しているため、GitHubでは管理していません。&lt;/p&gt;

&lt;p&gt;GitHubにプッシュすると、Travis CIに通知され、ビルドが開始されます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;The world’s leading software development platform · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;travis-ci&quot;&gt;Travis CI&lt;/h3&gt;

&lt;p&gt;CIサービスです。Travis CIでは、コンパイル、テスト、ドキュメント生成、プロジェクト静的解析、実行可能イメージを生成、などのビルド作業を行います。特にGitタグがプッシュされたとき(つまりリリースしたとき)は、実行可能イメージをDocker Hubにアップロードして、u6k.Rundeckに通知してデプロイを行います(一部のサービスのみ)。&lt;/p&gt;

&lt;p&gt;ビルド生成物は、Docker Hubの他に、GitHub Pages、u6k.Minioなどにもアップロードします。&lt;/p&gt;

&lt;p&gt;ビルド作業の結果は、Slackで通知します。&lt;/p&gt;

&lt;p&gt;GitHubのプルリクエストは、原則としてTravis CIのビルドがパスしないとマージできないように設定しています。これにより、焦っていてうっかりビルドを壊してしまうコミットが混入することを防いでいます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI - Test and Deploy Your Code with Confidence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;slack&quot;&gt;Slack&lt;/h3&gt;

&lt;p&gt;開発者向けのチャット・サービスです。個人開発では、自分だけのSlackワークスペースに&lt;code class=&quot;highlighter-rouge&quot;&gt;#build&lt;/code&gt;チャンネルを作成して、Travis CIのビルド結果が通知されるようにしています。Travis CIのコンソールを眺めていなくても、通知を待っていれば良い状況にしています。&lt;/p&gt;

&lt;p&gt;Slackには他にも、サービス監視によるアラート、バッチ処理失敗などが通知されるようになっています。将来的には、チャット・ボットを飼って、全てチャットから指示できるようにしたいと思っていますが、まだそこまではしていません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;よりシームレスなチームワークを実現する、ビジネスコラボレーションハブ | Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker-hub&quot;&gt;Docker Hub&lt;/h3&gt;

&lt;p&gt;Dockerイメージのホスティング・サービスです。Gitタグがプッシュされた場合、Travis CIでビルドしたDockerイメージをDocker Hubにプッシュします。個人開発は基本的にオープンソースとしているので、Dockerイメージの管理もDocker Hubのようなオープンな場でも問題ないと考えています。&lt;/p&gt;

&lt;p&gt;以前は、Docker HubによるAutomated Buildを利用していましたが、どうも思ったタイミングでビルドしてくれないので、Travis CIでビルドしています。&lt;/p&gt;

&lt;p&gt;仕事やプライベートな個人開発の場合は、GitLabのDockerリポジトリを利用しています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ce/user/project/container_registry.html&quot;&gt;GitLab Container Registry | GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rundeck&quot;&gt;Rundeck&lt;/h3&gt;

&lt;p&gt;ジョブ・スケジューラーです。バッチ処理を管理、実行していますが、一部のDockerコンテナの制御もジョブとして実行できるようにしています。&lt;/p&gt;

&lt;p&gt;Travis CIがDocker Hubにプッシュしたあと、RundeckのAPIを呼び出してジョブを起動します。ジョブは&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose pull&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;down&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;up -d&lt;/code&gt;を行います。これにより、Gitタグをプッシュすると、最終的に最新バージョンのサービスが起動します。同時に、RundeckがSlackにジョブ実行結果を通知します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rundeck.com/&quot;&gt;Rundeck Pro | Modern IT Operations Management Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;本番サーバー&quot;&gt;本番サーバー&lt;/h3&gt;

&lt;p&gt;ほとんどのサービスはDockerコンテナで動作(TODO: ソフトウェア設計にリンクを張る)しています。よって、本番サーバーにはDockerと最小限のソフトウェアのみがインストールされています。このため、以前は&lt;a href=&quot;/2017/04/28/my-server-specification-for-hardware.html&quot;&gt;CoreOSで運用していた時期&lt;/a&gt;もありました。現在は、もう少しソフトウェアをインストールしたくて、Debianで運用しています。&lt;/p&gt;

&lt;p&gt;ストレージ・サイズの関係で、基本的には自宅マシンをサーバーとして運用していますが、出張や旅行などで長期間自宅を離れる場合は、DigitalOceanなどのIaaSに一時的に移行して、帰宅後に切り戻します。この場合でも、DNS設定の変更とデータの移行が少々面倒なだけで、OSとDockerコンテナのセットアップはAnsibleで簡単に実行できるようにしています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mydns.jp/&quot;&gt;自宅サーバーやVPSに使える無料のダイナミックDNS (Dynamic DNS) | MyDNS.JP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean: Cloud Computing, Simplicity at Scale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coreos.com/&quot;&gt;Open source, containers, and Kubernetes | CoreOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.debian.org/&quot;&gt;Debian – ユニバーサルオペレーティングシステム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;いろいろなサービスが関わりますが、Gitプッシュしたあとはほぼ自動で様々なことができるようになっており、便利だしミスもほぼありません。また、Dockerを基盤としているため、どの言語処理系でも考え方が変わらないことも便利です。&lt;/p&gt;

&lt;p&gt;この記事で説明した構成は個人開発の場合ですが、仕事の場合でもオンプレミスになるだけで、構成の考え方は変わりありません。可能な限り自動化して、便利かつミスのないリリースをしましょう。&lt;/p&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="Docker" /><category term="git" /><category term="DigitalOcean" /><category term="Travis CI" /><category term="Rundeck" /><category term="サーバー" /><category term="設計" /><summary type="html">個人的にいくつかのアプリケーションを開発していまして、おひとりさま開発なので環境構築からリリース、運用まで全て自分で行っています。これらの作業の手間やミスを減らすため、可能な限り自動化しています。</summary></entry><entry><title type="html">自宅サーバー設計(ハードウェア編)</title><link href="/2018/06/04/my-service-specification-hardware-part.html" rel="alternate" type="text/html" title="自宅サーバー設計(ハードウェア編)" /><published>2018-06-04T00:00:00+09:00</published><updated>2018-06-04T00:00:00+09:00</updated><id>/2018/06/04/my-service-specification-hardware-part</id><content type="html" xml:base="/2018/06/04/my-service-specification-hardware-part.html">&lt;p&gt;自分用のRedmineやminioを運用するためにDockerホストを運用していますが、&lt;a href=&quot;https://blog.u6k.me/2017/04/28/my-server-specification-for-hardware.html&quot;&gt;前回&lt;/a&gt;から約1年が経過して、少し構成が変わったので整理します。&lt;/p&gt;

&lt;p&gt;この記事では、自分用のサービス群を運用するために利用しているサービスやハードウェアの構成を説明します。&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;昔使っていたMacBookがあるので、これをDockerホストにしたい。&lt;/li&gt;
  &lt;li&gt;HDDが数台あるけど、1個のボリュームにして扱いやすくしたい。&lt;/li&gt;
  &lt;li&gt;ドメイン名でアクセスできるようにしたい。&lt;/li&gt;
  &lt;li&gt;バックアップは、自宅とは別サイトにしたい。&lt;/li&gt;
  &lt;li&gt;ダウンタイムをなくしたいサービスは外部サービスで動作させる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;構成図&quot;&gt;構成図&lt;/h2&gt;

&lt;p&gt;現在は以下のような構成になっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/ff261bc14980fe296b507c8afdb5fb31.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;構成の説明&quot;&gt;構成の説明&lt;/h2&gt;

&lt;p&gt;前回からの変更点とあわせて、構成を説明します。&lt;/p&gt;

&lt;h3 id=&quot;docker-on-debian&quot;&gt;Docker on Debian&lt;/h3&gt;

&lt;p&gt;サービスはほぼDockerコンテナとして動作させています。当初はDocker for macで動作させていましたが、qcow2ファイルが肥大化する、ネットワークが不安定、などの問題があるため、Bootcampで確保したパーティションにDebianをセットアップして運用しています。&lt;/p&gt;

&lt;p&gt;前回はCoreOS on VirtualHost on MacBookで、一時的にDebian on DeigitalOceanに移行して、やっぱりDebian on MacBookに戻りました。サーバー上でいろいろ作業したい場合、CoreOSはやはり不便ですね。そういうOSなのでしかたありませんが。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; 実は、この記事を執筆している現時点ではまだDebian on VirtualBox on MacBookで、LVM RAID logical volumeの実験が完了したら、上記のように移行する予定です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;運用しているDockerサービス群は、別記事で説明します。&lt;/p&gt;

&lt;h3 id=&quot;運用作業のためにアクセスする場合はsshまたはvnc&quot;&gt;運用作業のためにアクセスする場合は、sshまたはVNC&lt;/h3&gt;

&lt;p&gt;普段の運用作業はsshで接続します。macOSの調子がおかしい、macOSをアップデートする、などGUIで作業を行う場合はVNCでアクセスします。&lt;/p&gt;

&lt;p&gt;この方式は、前回から変わりありません。&lt;/p&gt;

&lt;h3 id=&quot;u6kmeでアクセスできるようにムームードメインで契約&quot;&gt;“u6k.me”でアクセスできるように、ムームードメインで契約&lt;/h3&gt;

&lt;p&gt;ムームードメインで年間契約して、MyDNSでドメイン名とIPアドレスを管理しています。IPアドレスが変わっても良いように、Rundeckコンテナで定期的にIPアドレスを通知しています。&lt;/p&gt;

&lt;p&gt;前回までは、ジョブをJenkinsで実行していましたが(いわゆる闇のJenkinsおじさん)、現在はRundeckでジョブを実行しています。ただ、Rundeckへの移行は、正直、あまり意味がなかったかなと思っています。&lt;/p&gt;

&lt;h3 id=&quot;ブログはgithub-pagesで独自ドメイン--https&quot;&gt;ブログはGitHub Pagesで独自ドメイン + HTTPS&lt;/h3&gt;

&lt;p&gt;ブログはダウンタイムをゼロにしたく、DockerではなくGitHub Pagesに移行しました。これにより、Dockerホストが不安定になったときやmacOSをアップデートしたいときに、ブログも巻き込まれてダウンしていましたが、現在ではそれはなくなりました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; ブログのGitHub Pagesへの移行は、この記事執筆時点では検証中です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;hddはlvmで統合&quot;&gt;HDDはLVMで統合&lt;/h3&gt;

&lt;p&gt;HDDは、LVM RAID logical volumeで統合しています。この構成の場合、LVMの機能でミラーリングするので、HDDが1個故障する程度なら復旧が可能のはずです。&lt;/p&gt;

&lt;p&gt;前回はLVMで統合していただけであり、対障害性の観点からは脆弱でした。そうは言ってもDigitalOcean Spacesにバックアップしているので、絶対に失いたくないデータについてはあまり問題はありませんが。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; この記事を執筆している現在は、まだLVM on macOSからデータを移行している途中です。ある程度の検証ができたら、別記事でセットアップ、復旧手順などを整理したいと思います。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;バックアップはdigitalocean-spacesとクラウドストレージ&quot;&gt;バックアップはDigitalOcean Spacesとクラウドストレージ&lt;/h3&gt;

&lt;p&gt;Redmineのように絶対に失いたくないデータや、失うと再収集に時間がかかりすぎるクローリング・データなどは、minioサービスの他にDigitalOcean Spacesに保存しています。他のデータはクラウドストレージに保存しようとしていますが、まだ全ては保存できておらず、少しずつ進めています。&lt;/p&gt;

&lt;h3 id=&quot;macbookpro&quot;&gt;MacBookPro&lt;/h3&gt;

&lt;p&gt;排熱の観点から、風通しの良い場所において、まな板立てに立て掛けています。温度を監視していますが、変な高温になることは今のところありません。&lt;/p&gt;

&lt;p&gt;この運用方法は、前回から変わりありません。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;前回も書きましたが、できればAWSなりDigitalOceanなりに全て移行してしまいたいのですが、どーにもストレージの料金や性能を考えると、自宅ハードウエアがあるならそれで運用したい、という結論になっています。データのサイズがなぁ…&lt;/p&gt;

&lt;p&gt;ちなみに、旅行などで長期間自宅を離れる場合に、一時的にDigitalOceanに切り替える運用は、前回から変わらずです。&lt;/p&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="サーバー" /><category term="設計" /><summary type="html">自分用のRedmineやminioを運用するためにDockerホストを運用していますが、前回から約1年が経過して、少し構成が変わったので整理します。</summary></entry><entry><title type="html">「アンテナを張る」とは？</title><link href="/2018/05/19/what-is-keep-myself-open-to-news.html" rel="alternate" type="text/html" title="「アンテナを張る」とは？" /><published>2018-05-19T00:00:00+09:00</published><updated>2018-05-19T00:00:00+09:00</updated><id>/2018/05/19/what-is-keep-myself-open-to-news</id><content type="html" xml:base="/2018/05/19/what-is-keep-myself-open-to-news.html">&lt;p&gt;世の中の動きは早く、次々と新しい技術・概念・流行が現れて、広がったり消えたりしていきます。そういった流れに取り残されないために、また次の流れを読むために、「アンテナを張る」ことが大事だと言われます。エンジニアであれば体感的に理解できるでしょう。&lt;/p&gt;

&lt;p&gt;では、「アンテナを張る」とはどういうことで、何をするべきで、具体的にはどのような環境・運用になるのでしょうか。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;情報を収集し、整理し、蓄積する&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;蓄積することが大事&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;自分が使いやすいように/検索しやすいように蓄積する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;アンテナを張るとはどういうことか&quot;&gt;「アンテナを張る」とはどういうことか？&lt;/h2&gt;

&lt;p&gt;まず、「アンテナを張る」とはどういうことか調べてみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.weblio.jp/content/%E3%82%A2%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E5%BC%B5%E3%82%8B&quot;&gt;アンテナを張るとは - 日本語表現辞典 Weblio辞書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このページによると、「情報収集のため、特定の話題に対して注意深くすること」を表します。もう少し分解してみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;情報収集…情報を収集することが目的です。が、ただ目に入れても活用できません。蓄積すること、つまり何らかのアウトプットをすることが重要です。&lt;/li&gt;
  &lt;li&gt;特定の話題…世の中の全ての話題に反応することはできません。ある特定のテーマ、キーワードを決めて情報収集を行います。&lt;/li&gt;
  &lt;li&gt;注意深く…情報には価値の軽重があり、消費期限があります。有益な情報、価値が高い情報、時事性が高い情報を逃さないように、注意します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記の事ができれば、「アンテナを張っている」と言えるでしょう。&lt;/p&gt;

&lt;h2 id=&quot;具体的にどうすればよいか&quot;&gt;具体的にどうすればよいか&lt;/h2&gt;

&lt;p&gt;アンテナを張るには具体的にどうすればよいでしょうか。まず、「特定の話題」「注意深く」「情報収集」の構造を示します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/6db2f61e9eb18d2600376d477af63ca9.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;それぞれの構造を説明します。&lt;/p&gt;

&lt;h3 id=&quot;特定の話題厳選した情報源&quot;&gt;特定の話題…厳選した情報源&lt;/h3&gt;

&lt;p&gt;前述した通り、全ての話題に反応することはできません。ですので、情報源は厳選します。&lt;/p&gt;

&lt;p&gt;ブログをチェックしましょう。知りたい分野ごとにキュレーターがいるはずで、意欲的な人は情報を整理するために、個人ブログや企業サイトに投稿しています。もちろん、ブラウザでブログを開いていちいちチェックなどしていられないので、FeedlyなどのRSSサービスを利用しましょう。&lt;/p&gt;

&lt;p&gt;OSSの製品や、具体的なソースコードをチェックしたい場合は、GitHubをチェックしましょう。分野ごとにスターが多いリポジトリがあるので、それをウォッチすると良いです。&lt;/p&gt;

&lt;p&gt;TwitterやFacebookなどSNSからの情報収集は避けた方が良いです。最新情報をキャッチしたい場合には確かに有効ですが、整理されていない雑多な情報が多すぎて整理しきれませんし、有効な情報であればキュレーターがすぐに整理してくれます。&lt;/p&gt;

&lt;p&gt;Google News、スマートニュース、グノシー、Ceronなどニュースサービスは、参考程度にします。ある程度のジャンル分けはされていますが、「インターネット全体からピックアップした情報」であって「自分が気になる分野の濃い情報」ではないからです。それでも、自分の視界範囲外からピックアップしてくれるので、全く無視するべきでもありません。&lt;/p&gt;

&lt;h3 id=&quot;注意深くいったん全てに目を通しあとで熟読&quot;&gt;注意深く…いったん全てに目を通し、あとで熟読&lt;/h3&gt;

&lt;p&gt;情報源を厳選しても流れてくる情報は膨大なので、全て読むことは困難です。読み方を工夫しましょう。&lt;/p&gt;

&lt;p&gt;流れてくる情報のタイトルをざっと流し読み、気になる記事はブックマークするか、Pocketのようないわゆる「あとで読む」サービスにストックしておきましょう。良質の記事は、タイトルを読むだけで何のことを言っているのかが分かるものです。&lt;/p&gt;

&lt;p&gt;そして、スキマ時間を作ってストックした記事を読み進めます。この時も、記事を全て読むのではなくざっと全文を流し読みしましょう。それでも深く読み進めたい記事のみ、まとまった時間を作って読むと良いです。&lt;/p&gt;

&lt;h3 id=&quot;情報収集自分用のwikipediaを構築&quot;&gt;情報収集…自分用のWikipediaを構築&lt;/h3&gt;

&lt;p&gt;厳選した情報源から気になる情報を入手したら、それを整理して蓄積しましょう。整理方法はいろいろありますが、まずは「自分用のWikipedia」を目指すと良いです。つまり、「気になった用語」ごとにページを作り、記事へのURLだったりチェックリストだったり手法だったり手順書だったりをメモします。&lt;/p&gt;

&lt;p&gt;最初のうちはざっくりしたメモで良いです。重要度の高い情報は何度も目にするので、その内に「使えるように整理しよう」という気になり、有用な情報を追記するようになります。&lt;/p&gt;

&lt;p&gt;ツールはアナログでもデジタルでも良いですが、「容易に書けること」「容易に検索できる」ことが非常に重要です。書きづらい場所にはそもそも蓄積されませんし、いろいろ蓄積しても探しづらかったらそのうち使わなくなってしまいます。スマホでもPCでも見れるように、Evernoteのようなメモサービスに蓄積して、全文検索できるようにしましょう。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;アンテナを張ることについて、「アンテナを張るとはどう言うことか？(要求)」「どうすれば良いのか？(要件)」を文書化してみました。人と会話していると、ここら辺が意外と整理されておらず、漫然と情報収集っぽいことをしている人が見られます。もう少し的を絞って効率的に情報収集すれば良いのに、と思ったので、この記事を書いてみました。&lt;/p&gt;

&lt;p&gt;どうすれば良いのかと言うことの概要までを書いたので、次の機会には具体的な手法、筆者がチェックしているブログやサービス、筆者の蓄積や活用の手法などを説明したいと思います。&lt;/p&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="情報収集" /><summary type="html">世の中の動きは早く、次々と新しい技術・概念・流行が現れて、広がったり消えたりしていきます。そういった流れに取り残されないために、また次の流れを読むために、「アンテナを張る」ことが大事だと言われます。エンジニアであれば体感的に理解できるでしょう。</summary></entry><entry><title type="html">Sidekiq on Dockerサンプル</title><link href="/2018/04/29/sample-sidekiq.html" rel="alternate" type="text/html" title="Sidekiq on Dockerサンプル" /><published>2018-04-29T00:00:00+09:00</published><updated>2018-04-29T00:00:00+09:00</updated><id>/2018/04/29/sample-sidekiq</id><content type="html" xml:base="/2018/04/29/sample-sidekiq.html">&lt;p&gt;この記事では、SidekiqをDockerコンテナで動作させるためのセットアップ、実行手順を説明します。&lt;/p&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;Rubyでジョブ管理を行おうと考えたとき、&lt;a href=&quot;https://github.com/resque/resque&quot;&gt;Resque&lt;/a&gt;、&lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot;&gt;Delayed::Job&lt;/a&gt;、&lt;a href=&quot;https://github.com/mperham/sidekiq&quot;&gt;Sidekiq&lt;/a&gt;などの仕組みがあります。さらに定期的にジョブを実行したいと思い方法を探していると、&lt;a href=&quot;https://github.com/ondrejbartas/sidekiq-cron&quot;&gt;Sidekiq-Cron&lt;/a&gt;や&lt;a href=&quot;https://github.com/moove-it/sidekiq-scheduler&quot;&gt;sidekiq-scheduler&lt;/a&gt;の解説が多く見られました。このため、Sidekiqを使うことにしました。&lt;/p&gt;

&lt;p&gt;なお、Rails 5ではジョブ実装の共通的な仕組みとして&lt;a href=&quot;https://railsguides.jp/active_job_basics.html&quot;&gt;Active Job&lt;/a&gt;が使えますが、Active Jobがsidekiq-schedulerなどで使えるか分からなかったので、今回はSidekiqをそのまま使うことにしました。&lt;/p&gt;

&lt;p&gt;今回の手順で作成したプロジェクトは、 &lt;a href=&quot;https://github.com/u6k/sample-sidekiq/&quot;&gt;u6k/sample-sidekiq&lt;/a&gt; にあります。&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;p&gt;筆者はRails開発をvim + Dockerで行っており、ホストPCにRubyをインストールしてはいません。Dockerおよびdocker-composeを使用しますので、あらかじめインストールしておいてください。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker version
Client:
 Version:       18.03.0-ce
 API version:   1.37
 Go version:    go1.9.4
 Git commit:    0520e24
 Built: Wed Mar 21 23:10:06 2018
 OS/Arch:       linux/amd64
 Experimental:  false
 Orchestrator:  swarm

Server:
 Engine:
  Version:      18.03.0-ce
  API version:  1.37 (minimum version 1.12)
  Go version:   go1.9.4
  Git commit:   0520e24
  Built:        Wed Mar 21 23:08:35 2018
  OS/Arch:      linux/amd64
  Experimental: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose --version
docker-compose version 1.21.0, build 5920eb0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記は筆者の環境ですが、Docker環境であればOSは問わないはずです。&lt;/p&gt;

&lt;p&gt;エディターは、お好みのものを使いましょう。vimでもさくらエディタでもAtomでもVisual Studio Codeでも問題ありません。&lt;/p&gt;

&lt;p&gt;手順の説明は、なるべくDockerなどの知識がなくてもコピペすれば動作するように書いてあります。ただ、最低限のシェルの知識は必要になります。環境によっては権限設定により一般ユーザーでは動作しないかもしれません。rootになるなり &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; するなりしましょう。&lt;/p&gt;

&lt;p&gt;RubyやRailsなど他のソフトウェアは、全てDockerコンテナ内でインストールするので、ホストPCにインストールする必要はありません。&lt;/p&gt;

&lt;h2 id=&quot;セットアップ実行手順&quot;&gt;セットアップ、実行手順&lt;/h2&gt;

&lt;p&gt;次に、Railsプロジェクトを作成してからジョブを実行するまでの手順を説明します。&lt;/p&gt;

&lt;h3 id=&quot;railsプロジェクトを作成&quot;&gt;Railsプロジェクトを作成&lt;/h3&gt;

&lt;p&gt;Railsプロジェクトを作成します。ホストPCにRubyがセットアップ済みであれば &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new .&lt;/code&gt; を実行すれば良いですが、ここではrubyコンテナの中でRailsプロジェクトを作成します。&lt;/p&gt;

&lt;p&gt;まず、rubyコンテナを起動します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm -it -v $(pwd):/var/myapp -w /var/myapp ruby bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; オプションで、カレント・フォルダをコンテナ内の &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/myapp&lt;/code&gt; フォルダに割り当てます。そして &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; オプションで、コンテナ起動直後の作業フォルダを &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/myapp&lt;/code&gt; フォルダに設定しています。&lt;/p&gt;

&lt;p&gt;Ruby on Railsをインストールします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# gem install rails
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;カレント・フォルダにRailsプロジェクトを作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# rails new .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;作成したら、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; でファイルを確認してみます。Railsプロジェクトのファイルが作成されていることを確認したら、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-d&lt;/code&gt; でコンテナからログアウトします。&lt;/p&gt;

&lt;h3 id=&quot;gemfileに-sidekiq-を追加&quot;&gt;Gemfileに &lt;code class=&quot;highlighter-rouge&quot;&gt;sidekiq&lt;/code&gt; を追加&lt;/h3&gt;

&lt;p&gt;Sidekiqはgemで提供されているので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; ファイルに追加します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'sidekiq'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;また、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; ファイルの余計なコメント行を削除します。結果、次のように修正します(バージョンは時期により異なります)。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat Gemfile
source 'https://rubygems.org'
git_source(:github) { |repo| &quot;https://github.com/#{repo}.git&quot; }

ruby '2.5.1'

gem 'rails', '~&amp;gt; 5.2.0'
gem 'sqlite3'
gem 'puma', '~&amp;gt; 3.11'
gem 'sass-rails', '~&amp;gt; 5.0'
gem 'uglifier', '&amp;gt;= 1.3.0'
gem 'coffee-rails', '~&amp;gt; 4.2'
gem 'turbolinks', '~&amp;gt; 5'
gem 'jbuilder', '~&amp;gt; 2.5'
gem 'bootsnap', '&amp;gt;= 1.1.0', require: false
gem 'sidekiq'

group :development, :test do
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end

group :development do
  gem 'web-console', '&amp;gt;= 3.3.0'
  gem 'listen', '&amp;gt;= 3.0.5', '&amp;lt; 3.2'
  gem 'spring'
  gem 'spring-watcher-listen', '~&amp;gt; 2.0.0'
end

group :test do
  gem 'capybara', '&amp;gt;= 2.15', '&amp;lt; 4.0'
  gem 'selenium-webdriver'
  gem 'chromedriver-helper'
end

gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dockerコンテナ化&quot;&gt;Dockerコンテナ化&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails&lt;/code&gt; コマンドを使用したり動作確認するため、早々にDockerコンテナ化します。&lt;/p&gt;

&lt;p&gt;簡単にSidekiqを使用したコンテナ構造を説明すると、次のように構成します。ちなみに、今回はRailsアプリケーションが使用するDBとしてSQLiteを指定しているため、DBコンテナは構成しません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/c1ae5e8de4a4b098433fd8103fc1ae17.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;まず、アプリケーション用コンテナの &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; ファイルを作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat Dockerfile
FROM ruby:2.5

RUN apt-get update &amp;amp;&amp;amp; \
    apt-get install -y \
        nodejs &amp;amp;&amp;amp; \
    apt-get clean

VOLUME /var/myapp
WORKDIR /var/myapp

COPY Gemfile .
COPY Gemfile.lock .

RUN bundle install

EXPOSE 3000

CMD [&quot;rails&quot;, &quot;server&quot;, &quot;-b&quot;, &quot;0.0.0.0&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に、上図で説明したコンテナ構造を構成するため、 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; ファイルを作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat docker-compose.yml
version: '3'

services:
  app:
    build: .
    environment:
      - &quot;RAILS_ENV=development&quot;
      - &quot;REDIS_URL=redis://redis:6379&quot;
    volumes:
      - &quot;.:/var/myapp&quot;
    ports:
      - &quot;3000:3000&quot;
    depends_on:
      - &quot;redis&quot;
  worker:
    build: .
    environment:
      - &quot;RAILS_ENV=development&quot;
      - &quot;REDIS_URL=redis://redis:6379&quot;
    volumes:
      - &quot;.:/var/myapp&quot;
    depends_on:
      - &quot;redis&quot;
    command: sidekiq
  redis:
    image: redis:4.0
    volumes:
      - &quot;redis:/data&quot;
    command: redis-server --appendonly yes

volumes:
  redis:
    driver: local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;手順が間違えていなければ、イメージをビルドして、Railsアプリケーションを起動することができます。試しに、動作確認してみます。&lt;/p&gt;

&lt;p&gt;イメージをビルドします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コンテナを起動します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Webブラウザで http://localhost:3000 を開くか &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; コマンドでGETリクエストすると、Welcomeページが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-04-29-sample-sidekiq/rails-welcome-page.jpeg&quot; alt=&quot;rails welcome page&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ダッシュボードへのルートを設定&quot;&gt;ダッシュボードへのルートを設定&lt;/h3&gt;

&lt;p&gt;Sidekiqはジョブがどのような状態かを確認するためのダッシュボードを提供しています。ダッシュボードにアクセスするには、 &lt;code class=&quot;highlighter-rouge&quot;&gt;config/routes.rb&lt;/code&gt; ファイルにルートを設定します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sidekiq/web&lt;/code&gt; をrequireします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'sidekiq/web'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ダッシュボードへのルートを設定します。次のように設定すると、 http://localhost:3000/sidekiq でダッシュボードにアクセスできます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount Sidekiq::Web, at: '/sidekiq'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果、 &lt;code class=&quot;highlighter-rouge&quot;&gt;config/routes.rb&lt;/code&gt; ファイルは次のようになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat config/routes.rb
require 'sidekiq/web'

Rails.application.routes.draw do
  mount Sidekiq::Web, at: '/sidekiq'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ワーカーを作成&quot;&gt;ワーカーを作成&lt;/h3&gt;

&lt;p&gt;Sidekiqで実行するワーカーを作成します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails g&lt;/code&gt; コマンドで、Helloワーカーを作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose exec app rails g sidekiq:worker Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これにより、ワーカーとそのテスト・コードが作成されます。今回はワーカーのみ実装します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;app/worker/hello_worker.rb&lt;/code&gt; ファイルに &lt;code class=&quot;highlighter-rouge&quot;&gt;puts &quot;hello&quot;&lt;/code&gt; コードを追加します。結果、次のように修正します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat app/workers/hello_worker.rb
class HelloWorker
  include Sidekiq::Worker

  def perform(*args)
    puts &quot;hello&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ワーカーを実行&quot;&gt;ワーカーを実行&lt;/h3&gt;

&lt;p&gt;いよいよ、作成したワーカーをSidekiqで実行してみます。&lt;/p&gt;

&lt;p&gt;Sidekiqは変更したソースコードを自動では読み込んでくれないので、いったんコンテナを終了します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose down -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コンテナを起動します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;appコンテナのRailsコンソールを起動します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose exec app rails c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ワーカー・クラスの &lt;code class=&quot;highlighter-rouge&quot;&gt;perform_async&lt;/code&gt; メソッドを呼び出すことで、ワーカーをキューに登録します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; HelloWorker.perform_async
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正常に登録された場合、IDのような文字列が表示されます。エラーとなってしまいスタックトレースが表示された場合、これまでに作成したファイルや手順のどこかが間違えています。&lt;/p&gt;

&lt;p&gt;今、キューに登録したワーカーはすぐに実行されます。workerコンテナのログを確認します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose logs worker
Attaching to sample-sidekiq_worker_1
worker_1  | 2018-04-25T10:30:08.008Z 1 TID-gses4fdh1 INFO: Booting Sidekiq 5.1.3 with redis options {:url=&amp;gt;&quot;redis://redis:6379&quot;, :id=&amp;gt;&quot;Sidekiq-server-PID-1&quot;}
worker_1  | 2018-04-25T10:30:08.111Z 1 TID-gses4fdh1 INFO: Running in ruby 2.5.1p57 (2018-03-29 revision 63029)[x86_64-linux]
worker_1  | 2018-04-25T10:30:08.111Z 1 TID-gses4fdh1 INFO: See LICENSE and the LGPL-3.0 for licensing details.
worker_1  | 2018-04-25T10:30:08.111Z 1 TID-gses4fdh1 INFO: Upgrade to Sidekiq Pro for more features and support: http://sidekiq.org
worker_1  | 2018-04-25T10:30:08.114Z 1 TID-gses4fdh1 INFO: Starting processing, hit Ctrl-C to stop
worker_1  | 2018-04-25T10:30:25.434Z 1 TID-gsesimoz1 HelloWorker JID-4c48fc655e11bc9ee2cbe82b INFO: start
worker_1  | hello
worker_1  | 2018-04-25T10:30:25.441Z 1 TID-gsesimoz1 HelloWorker JID-4c48fc655e11bc9ee2cbe82b INFO: done: 0.005sec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; が出力されており、ワーカーが実行されたことが分かります。&lt;/p&gt;

&lt;p&gt;また、 http://localhost:3000/sidekiq にアクセスすると、次のようにダッシュボードが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-04-29-sample-sidekiq/sidekiq-dashboard.jpeg&quot; alt=&quot;sidekiq dashboard&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sidekiqをcron化&quot;&gt;SidekiqをCron化&lt;/h3&gt;

&lt;p&gt;ここまでの作業で、Sidekiqを使ったジョブの実行ができるようになりました。単純にジョブを実行するだけであれば、ここまでで終わりです。&lt;/p&gt;

&lt;p&gt;ここからは、sidekiq-cronを使ってジョブを定期的に実行してみます。&lt;/p&gt;

&lt;h3 id=&quot;gemfile-と-routesrb-を修正&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;routes.rb&lt;/code&gt; を修正&lt;/h3&gt;

&lt;p&gt;sidekiq-cronの設定は簡単で、2ファイルを修正するだけです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; ファイルを修正します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;sidekiq&lt;/code&gt; の後に &lt;code class=&quot;highlighter-rouge&quot;&gt;sidekiq-cron&lt;/code&gt; を追加します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat Gemfile

...(略)...
gem 'sidekiq'
gem 'sidekiq-cron'
...(略)...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/routes.rb&lt;/code&gt; ファイルを修正します。 &lt;code class=&quot;highlighter-rouge&quot;&gt;require 'sidekiq/web'&lt;/code&gt; の後に &lt;code class=&quot;highlighter-rouge&quot;&gt;require 'sidekiq/cron/web'&lt;/code&gt; を追加します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat config/routes.rb
require 'sidekiq/web'
require 'sidekiq/cron/web'
...(略)...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで、ジョブを定期実行する準備は完了です。ワーカーを変更する必要はありません。&lt;/p&gt;

&lt;h3 id=&quot;ジョブを定期実行&quot;&gt;ジョブを定期実行&lt;/h3&gt;

&lt;p&gt;Dockerコンテナを停止して、起動して、Railsコンソールを起動します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose down -v
$ docker-compose up -d
$ docker-compose exec app rails c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ジョブを定期実行する場合は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidekiq::Cron::Job.create&lt;/code&gt; を呼び出します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Sidekiq::Cron::Job.create name: &quot;Hello Job&quot;, cron: &quot;* * * * *&quot;, class: &quot;HelloWorker&quot;
2018-04-27T04:26:05.562Z 50 TID-govsxyfv2 INFO: Cron Jobs - add job with name: Hello Job
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでジョブの定期実行が開始されます。しばらくしてから、workerコンテナのログを確認します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo docker-compose logs worker
worker_1  | 2018-04-27T04:27:25.246Z 1 TID-grpm2wxhh HelloWorker JID-f746b9ad3c0740cd2bbee4fb INFO: start
worker_1  | hello
worker_1  | 2018-04-27T04:27:25.267Z 1 TID-grpm2wxhh HelloWorker JID-f746b9ad3c0740cd2bbee4fb INFO: done: 0.02 sec
worker_1  | 2018-04-27T04:28:05.080Z 1 TID-grpm2x371 HelloWorker JID-51fce69dc54f378fad381750 INFO: start
worker_1  | hello
worker_1  | 2018-04-27T04:28:05.081Z 1 TID-grpm2x371 HelloWorker JID-51fce69dc54f378fad381750 INFO: done: 0.001 sec
worker_1  | 2018-04-27T04:29:15.094Z 1 TID-grpm2x0dx HelloWorker JID-f0d933d3cda1de168afe4914 INFO: start
worker_1  | hello
worker_1  | 2018-04-27T04:29:15.096Z 1 TID-grpm2x0dx HelloWorker JID-f0d933d3cda1de168afe4914 INFO: done: 0.002 sec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;約1分ごとにジョブが実行されています。&lt;/p&gt;

&lt;p&gt;どのようなジョブが定期実行されているかは、Sidekiqダッシュボードで確認できます。Sidekiqダッシュボードのメニューに”Cron”が追加されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-04-29-sample-sidekiq/sidekiq-dashboard-2.jpeg&quot; alt=&quot;sidekiq dashboard 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cronページを見ると、登録したジョブが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-04-29-sample-sidekiq/sidekiq-dashboard-cron.jpeg&quot; alt=&quot;sidekiq dashboard cron&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;このように、Railsアプリケーションに簡単に定期実行ジョブを追加することができました。アプリケーション固有の、クリーンアップ処理や単純な集計バッチ処理などであれば、これで十分だと思います。&lt;/p&gt;

&lt;p&gt;一方、「ジョブ管理システム」として考えると、いろいろと機能が不足しています。ジョブネット、ジョブごとのワークスペース、ジョブ実行履歴、など。そういった機能が必要な場合は、やはりジョブ管理専用のサービスを使うことになると思います。&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mperham/sidekiq&quot;&gt;mperham/sidekiq: Simple, efficient background processing for Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/nysalor/items/94ecd53c2141d1c27d1f&quot;&gt;sidekiqの使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shiro-16.hatenablog.com/entry/2015/10/12/192412&quot;&gt;Sidekiq について基本と1年半運用してのあれこれ - まっしろけっけ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tech.smarthr.jp/entry/2017/04/20/165555&quot;&gt;Sidekiq アンチパターン: 序 - SmartHR Tech Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ondrejbartas/sidekiq-cron&quot;&gt;ondrejbartas/sidekiq-cron: Scheduler / Cron for Sidekiq jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="Docker" /><category term="Ruby on Rails" /><category term="Sidekiq" /><category term="Cron" /><category term="ジョブ" /><summary type="html">この記事では、SidekiqをDockerコンテナで動作させるためのセットアップ、実行手順を説明します。</summary></entry><entry><title type="html">This Week I Learned (from 2018-02-12 to 2018-02-18)</title><link href="/2018/02/18/this-week-i-learned.html" rel="alternate" type="text/html" title="This Week I Learned (from 2018-02-12 to 2018-02-18)" /><published>2018-02-18T23:50:00+09:00</published><updated>2018-02-18T23:50:00+09:00</updated><id>/2018/02/18/this-week-i-learned</id><content type="html" xml:base="/2018/02/18/this-week-i-learned.html">&lt;p&gt;今週の気になったニュースや自ソフトウェアのリリース情報や書いた記事を整理します。&lt;/p&gt;

&lt;h2 id=&quot;ニュース&quot;&gt;ニュース&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/Anharu/items/c32fbb2347e3da6607ba&quot;&gt;中学生エンジニアについて、知っておきたい10の事実 - Qiita&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;自分の頃は(年代がバレるけど)ベーマガが入門だった。現代の初学者がどのように入門するのか気になっていた。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://togetter.com/li/1198226&quot;&gt;Excelを未だに使っているという事実「億単位の案件に使うなよ！」→使えないExcel地獄で苦しむみなさんが出したExcelを使う理由とは…？ - Togetter&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;プラットフォームの普及度は、良くも悪くも偉大だ。どの現場でもとりあえずWord、Excel、PowerPointはインストールされているし、どの環境でもVBAは使える。良くも悪くも。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/masuda220/rdra-ddd-agile&quot;&gt;RDRA DDD Agile&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;RDRAとICONIXの合わせ技は非常に良い手法なので、積極的に使っていきたい。BABOKは概要だけ知っている状態なので、機会があれば勉強しながら使ってみる。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/dmikurube/items/15899ec9de643e91497c&quot;&gt;タイムゾーン呪いの書 - Qiita&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ロケールと時刻はどの処理系でもハマる。そもそもの考え方が複雑だから。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tech.nikkeibp.co.jp/atcl/nxt/column/18/00001/00014/&quot;&gt;［特報］27億円の賠償巡り新たなIT裁判始まる、文化シヤッターが提訴 | 日経 xTECH（クロステック）&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;経緯を読む限りではどっちもメチャクチャなのだけど。旭川医大の件も記憶に新しいし、この件がどのように判断されるのか気になる。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;リリース情報&quot;&gt;リリース情報&lt;/h2&gt;

&lt;p&gt;今週も記事執筆もなし。アウトライナーには溜まっているのだけど。ようやく作業用PCを持ち歩けるようになったので、少しは状況が改善するはず。&lt;/p&gt;</content><author><name>u6k</name><email>u6k.apps@gmail.com</email></author><category term="This Week I Learned" /><summary type="html">今週の気になったニュースや自ソフトウェアのリリース情報や書いた記事を整理します。</summary></entry></feed>